// Copyright (c) 2018 RISC Software GmbH
//
// This file was generated by CPACSGen from CPACS XML Schema (c) German Aerospace Center (DLR/SC).
// Do not edit, all changes are lost when files are re-generated.
//
// Licensed under the Apache License, Version 2.0 (the "License")
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

#pragma once

#include <boost/optional.hpp>
#include <boost/utility/in_place_factory.hpp>
#include <CCPACSCurveParamPointMap.h>
#include <CCPACSPointListXYZVector.h>
#include <CCPACSStringVector.h>
#include <string>
#include <tixi.h>
#include "CreateIfNotExists.h"
#include "tigl_internal.h"

namespace tigl
{
namespace generated
{
    // This class is used in:
    // CPACSProfileGeometry

    // generated from /xsd:schema/xsd:complexType[723]
    /// @brief A curve that interpolates a list of points.
    /// 
    /// The curve interpolates the list of points, typically with a b-spline.
    /// In theory, the interpolation is somewhat ambiguous as it is not defined at which
    /// curve parameter a point will be interpolated.
    /// To solve is ambiguity, an optional parameter map can be defined
    /// that maps point indices with curve parameters.
    /// Kinks can also be modeled by populating the "kinks" array with the
    /// indices of points that should be on a kink. As an example, look at the following image:
    /// @see curve_point_list_xyz
    /// In this example, the kinks array will be "2;6".
    /// Optionally, the parameters of the kinks can be set in the parameter map.
    /// The whole profile looks as follows:
    /// <pointList>
    /// <x mapType="vector">...</x>
    /// <y mapType="vector">...</y>
    /// <z mapType="vector">...</z>
    /// <kinks mapType="vector">2;6</kinks>
    /// <parameterMap>
    /// <pointIndex mapType="vector">2;4;6</pointIndex>
    /// <paramOnCurve mapType="vector">0.2;0.5;0.8</paramOnCurve>
    /// </parameterMap>
    /// </pointList>
    class CPACSCurvePointListXYZ : public CCPACSPointListXYZVector
    {
    public:
        TIGL_EXPORT CPACSCurvePointListXYZ();
        TIGL_EXPORT virtual ~CPACSCurvePointListXYZ();

        TIGL_EXPORT virtual void ReadCPACS(const TixiDocumentHandle& tixiHandle, const std::string& xpath);
        TIGL_EXPORT virtual void WriteCPACS(const TixiDocumentHandle& tixiHandle, const std::string& xpath) const;

        TIGL_EXPORT virtual const boost::optional<CCPACSStringVector>& GetKinks() const;
        TIGL_EXPORT virtual boost::optional<CCPACSStringVector>& GetKinks();

        TIGL_EXPORT virtual const boost::optional<CCPACSCurveParamPointMap>& GetParameterMap() const;
        TIGL_EXPORT virtual boost::optional<CCPACSCurveParamPointMap>& GetParameterMap();

        TIGL_EXPORT virtual CCPACSStringVector& GetKinks(CreateIfNotExistsTag);
        TIGL_EXPORT virtual void RemoveKinks();

        TIGL_EXPORT virtual CCPACSCurveParamPointMap& GetParameterMap(CreateIfNotExistsTag);
        TIGL_EXPORT virtual void RemoveParameterMap();

    protected:
        /// Points, at which the curve has a kink. This list contains the indices
        /// of the points at which the curve should contain a kink. Each index is in the range [0, n-1].
        boost::optional<CCPACSStringVector>       m_kinks;

        /// Map between point index and curve parameter.
        boost::optional<CCPACSCurveParamPointMap> m_parameterMap;

    private:
        CPACSCurvePointListXYZ(const CPACSCurvePointListXYZ&) = delete;
        CPACSCurvePointListXYZ& operator=(const CPACSCurvePointListXYZ&) = delete;

        CPACSCurvePointListXYZ(CPACSCurvePointListXYZ&&) = delete;
        CPACSCurvePointListXYZ& operator=(CPACSCurvePointListXYZ&&) = delete;
    };
} // namespace generated

// CPACSCurvePointListXYZ is customized, use type CCPACSCurvePointListXYZ directly
} // namespace tigl
